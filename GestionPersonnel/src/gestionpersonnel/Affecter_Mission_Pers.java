/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gestionpersonnel;

import java.awt.Frame;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 *<b> Cette interface permet d'affecter un employé a une mission</b>
 * @author cedri
 */
public class Affecter_Mission_Pers extends javax.swing.JDialog {

    private HashMap<String, Integer> competences = new HashMap<>();
    private String[] strings = new String[4];
    private ArrayList<Integer> personnels = new ArrayList<>();
    private int nbBesoins = 0;
    private int nbSelect = 0;
    
    /**
     * Creates new form Affecter_Mission_Pers
     * @param parent
     *      Frame parent est Menu_Mission
     * @param modal
     *      boolean modal
     */
    public Affecter_Mission_Pers(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setSize(getWidth() + 16, getHeight() + 39);
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        
    }
    
    public Affecter_Mission_Pers(Frame parent, boolean modal, HashMap<String, Integer> competences, String[] strings) throws IOException, ParseException {
        super(parent, modal);
        initComponents();
        this.setSize(getWidth() + 16, getHeight() + 39);
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.competences = competences;
        this.strings = strings;
        recupererDonnees();
        recupererPersonnelCompetent();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabComp = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        bEnregistrer = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabPers = new javax.swing.JTable();
        lNbPersonnes1 = new javax.swing.JLabel();
        lNbPersonnes2 = new javax.swing.JLabel();
        bRetour = new javax.swing.JButton();
        bValider = new javax.swing.JButton();
        tTtitre = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(248, 249, 250));

        jLabel4.setFont(new java.awt.Font("Nunito Sans", 0, 14)); // NOI18N
        jLabel4.setText("Compétences nécessaires :");

        jScrollPane1.setForeground(new java.awt.Color(74, 74, 74));
        jScrollPane1.setFont(new java.awt.Font("Nunito Sans", 0, 14)); // NOI18N

        tabComp.setAutoCreateRowSorter(true);
        tabComp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Code", "Nom", "Nb necessaire"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabComp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabCompMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tabCompMouseEntered(evt);
            }
        });
        jScrollPane1.setViewportView(tabComp);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Personnel compétent :", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Nunito Sans", 0, 14))); // NOI18N
        jPanel1.setForeground(new java.awt.Color(74, 74, 74));
        jPanel1.setFont(new java.awt.Font("Nunito Sans", 0, 14)); // NOI18N

        bEnregistrer.setFont(new java.awt.Font("Nunito Sans", 0, 14)); // NOI18N
        bEnregistrer.setForeground(new java.awt.Color(74, 74, 74));
        bEnregistrer.setText("Mettre à jour");
        bEnregistrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEnregistrerActionPerformed(evt);
            }
        });

        jScrollPane2.setFont(new java.awt.Font("Nunito Sans", 0, 14)); // NOI18N

        tabPers.setAutoCreateRowSorter(true);
        tabPers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Code", "Nom", "Prénom", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabPers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabPersMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabPers);

        lNbPersonnes1.setFont(new java.awt.Font("Nunito Sans", 0, 14)); // NOI18N
        lNbPersonnes1.setForeground(new java.awt.Color(74, 74, 74));
        lNbPersonnes1.setText("X/Y");

        lNbPersonnes2.setFont(new java.awt.Font("Nunito Sans", 0, 14)); // NOI18N
        lNbPersonnes2.setForeground(new java.awt.Color(74, 74, 74));
        lNbPersonnes2.setText("Personnels");

        bRetour.setFont(new java.awt.Font("Nunito Sans", 0, 14)); // NOI18N
        bRetour.setForeground(new java.awt.Color(74, 74, 74));
        bRetour.setText("Retour");
        bRetour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRetourActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(bRetour)
                        .addGap(0, 693, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lNbPersonnes1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lNbPersonnes2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bEnregistrer)
                .addGap(101, 101, 101))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lNbPersonnes1)
                    .addComponent(lNbPersonnes2)
                    .addComponent(bEnregistrer))
                .addGap(23, 23, 23)
                .addComponent(bRetour)
                .addContainerGap())
        );

        bValider.setFont(new java.awt.Font("Nunito Sans", 0, 14)); // NOI18N
        bValider.setForeground(new java.awt.Color(74, 74, 74));
        bValider.setText("Valider");
        bValider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bValiderActionPerformed(evt);
            }
        });

        tTtitre.setFont(new java.awt.Font("Nunito Sans", 0, 30)); // NOI18N
        tTtitre.setForeground(new java.awt.Color(74, 74, 74));
        tTtitre.setText("Ajouter le personnel compétent à la mission");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 709, Short.MAX_VALUE)
                        .addComponent(bValider))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tTtitre)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tTtitre)
                .addGap(42, 42, 42)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(108, 108, 108)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bValider)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tabCompMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabCompMouseClicked

    }//GEN-LAST:event_tabCompMouseClicked

    private void bValiderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bValiderActionPerformed
            DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            Mission m = new Mission(this.strings[0], Integer.parseInt(this.strings[2]),this.strings[1] , 1, Integer.parseInt(this.strings[3]));
            for (String s : this.competences.keySet()) {
                m.addCompetence(s, this.competences.get(s));
            }
            Personnel ps = null;
            for (Integer i : this.personnels) {
                for (Personnel p : PersonnelDAO.personnels) {
                    if (p.getId() == i) {
                        ps = p;
                    }
                }
                m.addParticipant(i, ps);
            }
            MissionDAO.missions.add(m);
            this.dispose();

    }//GEN-LAST:event_bValiderActionPerformed

    private void bRetourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRetourActionPerformed
        this.dispose();
    }//GEN-LAST:event_bRetourActionPerformed

    private void tabPersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabPersMouseClicked
    }//GEN-LAST:event_tabPersMouseClicked

    
    
    private void bEnregistrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEnregistrerActionPerformed
        nbSelect = 0;
        this.personnels = new ArrayList<Integer>();
        for (int i = 0; i < tabPers.getRowCount(); i++) {
            int id = Integer.parseInt((String) tabPers.getValueAt(i, 0));
            if ((boolean) tabPers.getValueAt(i, 3) ) {
                nbSelect++;             
                this.personnels.add(id);
                lNbPersonnes1.setText(nbSelect + " / " + nbBesoins);
            }
            else {
                if (this.personnels.contains(id)) {
                    this.personnels.remove(Integer.valueOf(id));
                    nbSelect--;
                    lNbPersonnes1.setText(nbSelect + " / " + nbBesoins);
                }
            }
        } 
    }//GEN-LAST:event_bEnregistrerActionPerformed

    private void tabCompMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabCompMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_tabCompMouseEntered

    
    public void recupererDonnees() throws IOException, ParseException {
        Object[][] data = new Object[this.competences.size()][3];
        Set<String> keys = this.competences.keySet();
        int i = 0;
        String nom = null;
        for (String s : keys) {          
            data[i][0] = s;
            for (Competence c : CompetenceDAO.competences) {
                if (c.getId().equals(s))
                    nom = c.getName();
            }
            data[i][1] = nom;
            data[i][2] = this.competences.get(s);
            i++;
            nbBesoins += this.competences.get(s);
        }
        String[] header = new String[] {"Code", "Nom", "Nombre de personnes nécessaire"};
        DefaultTableModel tbm = new DefaultTableModel(data, header);
        tabComp.setModel(tbm);
    }
    
    public void recupererPersonnelCompetent() throws IOException, ParseException {
        if (!PersonnelDAO.hasloadP) {
            PersonnelDAO pDAO = new PersonnelDAO();
            pDAO.recupererPersonnels();
        }
        if (!PersonnelDAO.hasloadC) {
            PersonnelDAO pDAO = new PersonnelDAO();
            pDAO.recupererCompetencesPersonnels();
        }
        ArrayList<Personnel> pCompetent = new ArrayList<>();
        Set<String> keys = this.competences.keySet();
        for (String s : keys) {          
            for (Personnel p : PersonnelDAO.personnels) {
                for (Competence c : p.competences) {
                    if ((canAddToList((Integer.valueOf(p.getId())), pCompetent)) && (c.getId().equals(s))) {
                        pCompetent.add(p);
                    }
                }
            }
        }
        int i = 0;
        DefaultTableModel dtm = (DefaultTableModel) tabPers.getModel();
        dtm.setRowCount(pCompetent.size());
        tabPers.setModel(dtm);
        for (Personnel p : pCompetent) {
            tabPers.setValueAt(String.valueOf(p.getId()), i, 0);
            tabPers.setValueAt(p.getName(), i, 1);
            tabPers.setValueAt(p.getPrenom(), i, 2);
            tabPers.setValueAt(false, i, 3);
            i++;
        }
    }
    
    public boolean canAddToList(Integer toAdd, ArrayList<Personnel> arraylist) {
        for (Personnel p : arraylist) {
            if (p.getId() == toAdd) {
                return false;
            }
        }
        return true;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Affecter_Mission_Pers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Affecter_Mission_Pers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Affecter_Mission_Pers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Affecter_Mission_Pers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Affecter_Mission_Pers dialog = new Affecter_Mission_Pers(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bEnregistrer;
    private javax.swing.JButton bRetour;
    private javax.swing.JButton bValider;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lNbPersonnes1;
    private javax.swing.JLabel lNbPersonnes2;
    private javax.swing.JLabel tTtitre;
    private javax.swing.JTable tabComp;
    private javax.swing.JTable tabPers;
    // End of variables declaration//GEN-END:variables
}
